{{!-- <link href="https://unpkg.com/cropperjs/dist/cropper.css" rel="stylesheet" />
  <script src="https://unpkg.com/dropzone"></script>
  <script src="https://unpkg.com/cropperjs"></script>  --}}


<div class="container mt-4">
    <div class="row">
        <div class="col-md-6 mx-auto add">
            <h2 class="text-center">Add Product</h2>
            <form action="/admin/add-product" method="POST" enctype="multipart/form-data">
                <label for="">Name</label>
                <input type="text" name="Name" class="form-control">
                  <label for="">Category</label><br>
               <select name="Category">
                 <option name="Category">Select Option</option>
                {{#each categories}}
                <option>{{this.Category}}</option>
                {{/each}}
               </select><br>
                  <label for="">Price</label>
                <input type="text" name="Price" class="form-control">
                  <label for="">Description</label>
                <input type="text" name="Description" class="form-control">
                 {{!-- <label for="" >Image</label><br>
                 <div  class="preview-images" ></div>
                 <img  src="/product-images/download.jpg" style="width:5rem;height:auto;" id="img" > 
                  <input type="file"  id="input-files" name="file" multiple class="form-control"  value="{{product.Image}}"  onchange="viewImage(event)"> --}}
                 <div class="row">
              
              {{!-- <div id="image-box2" class="image-container m-2 " style="height: 300px;width:300px;display:none;"></div>
              <button class="btn btn-outline-dark" id="crop-btn2" style="width:20%; margin-top: 3px; display: none;"
                type="button">Crop</button>
  
  
              <div id="image-box3" class="image-container m-2 " style="height: 300px;width:300px;display:none;"></div>
              <button class="btn btn-outline-dark" id="crop-btn3" style=" width:20%;margin-top: 3px; display: none;"
                type="button">Crop</button>
  
  
              <div id="image-box4" class="image-container m-2 " style="height: 300px;width:300px;display:none;"></div>
              <button class="btn btn-outline-dark " id="crop-btn4" style="width:20%; margin-top: 3px; display: none;"
                type="button">Crop</button>
  
  
   --}}
              <div class="m-4 col-lg-4 ">
  
                <label for="">Image</label><br>
                <img src="/product-images/download.jpg" style="width:5rem;height:auto;"  id="imgView1">
  
                <input type="file" id="id_image1" name="image1" class="img" accept="image/*"
                  onchange="viewImage1(event)"><br>
  
                <div class="vald-info" id="info1"></div>
                <h5 class="error_form text-danger" id="image1_error_message"></h5>
              </div><br>

              <div id="image-box1" class="image-container m-2 " style="height: 250px;width:250px;display:none;"></div>
              <button class="btn btn-outline-dark w-50 " id="crop-btn1" style=" display:none;"
                type="button">Crop</button>
  
  
  
  
              {{!-- <div class="mb-3  col-lg-4 mt-4">
  
                <label for="">Image</label><br>
                <img src="/product-images/{{product._id}}.jpg" style="width: 100px;height:100px" alt="" id="imgView2">
  
                <input type="file" id="id_image2" name="image2" class="img" accept="image/*"
                  onchange="viewImage2(event)"><br>
  
                <div class="vald-info" id="info2"></div>
                <h5 class="error_form text-danger" id="image2_error_message"></h5>
              </div>
  
  
              <div class="m-4  col-lg-4 ">
  
                <label for="">Image</label><br>
                <img src="/product-images/{{product._id}}.jpg" style="width: 100px;height:100px" alt="" id="imgView3">
  
                <input type="file" id="id_image3" name="image3" class="img" accept="image/*"
                  onchange="viewImage3(event)"><br>
  
                <div class="vald-info" id="info3"></div>
                <h5 class="error_form text-danger" id="image3_error_message"></h5>
              </div>
  
  
              <div class="mb-3  col-lg-4 mt-4">
  
                <label for="">Image</label><br>
                <img src="/product-images/{{product._id}}.jpg" style="width: 100px;height:100px" alt="" id="imgView4">
  
                <input type="file" id="id_image4" name="image4" class="img" accept="image/*"
                  onchange="viewImage4(event)"><br>
  
                <div class="vald-info" id="info4"></div>
                <h5 class="error_form text-danger" id="image4_error_message"></h5>
              </div>
  
   --}}
  
  
  
  
  
            </div>

               <center><button type="submit" class="btn btn-dark mt-4 w-50 mb-5">Submit</button></center>
            </form>
        </div>
    </div>
</div>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.11/cropper.js"></script>
  
  <script src="https://code.jquery.com/jquery-3.6.0.js" integrity="sha256-H+K7U5CnXl1h5ywQfKtSj8PCmoN9aaq30gDh27Xc0jk="
    crossorigin="anonymous"></script>
  <script src="//cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
   /*  function fileValidation1() {
  
     const imagebox = document.getElementById('image-box1')
    const crop_btn = document.getElementById('crop-btn1')
    var fileInput = document.getElementById('file1');
    var filePath = fileInput.value;
    var allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
    if (!allowedExtensions.exec(filePath)) {
      fileInput.value = '';
      Swal.fire('Upload image only') 
      return false;
    } 
    
    }**/

     //1
    const imagebox1 = document.getElementById('image-box1')
    const crop_btn1 = document.getElementById('crop-btn1')
    const input1 = document.getElementById('id_image1')
    function viewImage1(event) {
  
  
      var fileInput = document.getElementById('id_image1');
  
      var filePath = fileInput.value;
      var allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
      if (!allowedExtensions.exec(filePath)) {
        fileInput.value = '';
        swal("There is a problem!", "Please choose image file.");
        return false;
      } else {
        document.getElementById('imgView1').src = URL.createObjectURL(event.target.files[0])
  
      }
  
    }
  
  
    // When user uploads the image this event will get triggered
    input1.addEventListener('change', () => {
      // Getting image file object from the input variable
      const img_data1 = input1.files[0]
      // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
      // The new object URL represents the specified File object or Blob object.
      const url1 = URL.createObjectURL(img_data1)
      // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
      imagebox1.innerHTML = `<img src="${url1}" id="image1" style="width:100%;">`
      // Storing that cropping view image in a variable
      const image1 = document.getElementById('image1')
  
      // Displaying the image box
      document.getElementById('image-box1').style.display = 'block'
      // Displaying the Crop buttton
      document.getElementById('crop-btn1').style.display = 'block'
      // Hiding the Post button
      const cropper1 = new Cropper(image1, {
        autoCropArea: 1,
        viewMode: 1,
        scalable: false,
        zoomable: false,
        movable: false,
        minCropBoxWidth: 50,
        minCropBoxHeight: 50,
      })
      // When crop button is clicked this event will get triggered
      crop_btn1.addEventListener('click', () => {
        // This method coverts the selected cropped image on the cropper canvas into a blob object
        cropper1.getCroppedCanvas().toBlob((blob) => {
          // Gets the original image data
          let fileInputElement1 = document.getElementById('id_image1');
          // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
          let file1 = new File([blob], img_data1.name, { type: "image/*", lastModified: new Date().getTime() });
          // Create a new container
          let container1 = new DataTransfer();
          // Add the cropped image file to the container
          container1.items.add(file1);
          // Replace the original image file with the new cropped image file
          fileInputElement1.files = container1.files;
          document.getElementById('imgView1').src = URL.createObjectURL(fileInputElement1.files[0])
          // Hide the cropper box
          document.getElementById('image-box1').style.display = 'none'
          // Hide the crop button
          document.getElementById('crop-btn1').style.display = 'none'
        })
      })
    })
  
    //2
    const imagebox2 = document.getElementById('image-box2')
    const crop_btn2 = document.getElementById('crop-btn2')
    const input2 = document.getElementById('id_image2')
    function viewImage2(event) {
  
  
      var fileInput2 = document.getElementById('id_image2');
  
      var filePath2 = fileInput2.value;
      var allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
      if (!allowedExtensions.exec(filePath2)) {
        fileInput2.value = '';
        swal("There is a problem!", "Please choose image file.");
        return false;
      } else {
        document.getElementById('imgView2').src = URL.createObjectURL(event.target.files[0])
  
      }
  
    }
  
  
    // When user uploads the image this event will get triggered
    input2.addEventListener('change', () => {
      // Getting image file object from the input variable
      const img_data2 = input2.files[0]
      // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
      // The new object URL represents the specified File object or Blob object.
      const url2 = URL.createObjectURL(img_data2)
      // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
      imagebox2.innerHTML = `<img src="${url2}" id="image2" style="width:100%;">`
      // Storing that cropping view image in a variable
      const image2 = document.getElementById('image2')
  
      // Displaying the image box
      document.getElementById('image-box2').style.display = 'block'
      // Displaying the Crop buttton
      document.getElementById('crop-btn2').style.display = 'block'
      // Hiding the Post button
      const cropper = new Cropper(image2, {
        autoCropArea: 1,
        viewMode: 1,
        scalable: false,
        zoomable: false,
        movable: false,
        minCropBoxWidth: 50,
        minCropBoxHeight: 50,
      })
      // When crop button is clicked this event will get triggered
      crop_btn2.addEventListener('click', () => {
        // This method coverts the selected cropped image on the cropper canvas into a blob object
        cropper.getCroppedCanvas().toBlob((blob) => {
          // Gets the original image data
          let fileInputElement2 = document.getElementById('id_image2');
          // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
          let file2 = new File([blob], img_data2.name, { type: "image/*", lastModified: new Date().getTime() });
          // Create a new container
          let container2 = new DataTransfer();
          // Add the cropped image file to the container
          container2.items.add(file2);
          // Replace the original image file with the new cropped image file
          fileInputElement2.files = container2.files;
          document.getElementById('imgView2').src = URL.createObjectURL(fileInputElement2.files[0])
          // Hide the cropper box
          document.getElementById('image-box2').style.display = 'none'
          // Hide the crop button
          document.getElementById('crop-btn2').style.display = 'none'
        })
      })
    })
  
    //3
    const imagebox3 = document.getElementById('image-box3')
    const crop_btn3 = document.getElementById('crop-btn3')
    const input3 = document.getElementById('id_image3')
    function viewImage3(event) {
  
  
      var fileInput3 = document.getElementById('id_image3');
  
      var filePath3 = fileInput3.value;
      var allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
      if (!allowedExtensions.exec(filePath3)) {
        fileInput3.value = '';
        swal("There is a problem!", "Please choose image file.");
        return false;
      } else {
        document.getElementById('imgView3').src = URL.createObjectURL(event.target.files[0])
  
      }
  
    }
  
  
    // When user uploads the image this event will get triggered
    input3.addEventListener('change', () => {
      // Getting image file object from the input variable
      const img_data3 = input3.files[0]
      // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
      // The new object URL represents the specified File object or Blob object.
      const url3 = URL.createObjectURL(img_data3)
      // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
      imagebox3.innerHTML = `<img src="${url3}" id="image3" style="width:100%;">`
      // Storing that cropping view image in a variable
      const image3 = document.getElementById('image3')
  
      // Displaying the image box
      document.getElementById('image-box3').style.display = 'block'
      // Displaying the Crop buttton
      document.getElementById('crop-btn3').style.display = 'block'
      // Hiding the Post button
      const cropper = new Cropper(image3, {
        autoCropArea: 1,
        viewMode: 1,
        scalable: false,
        zoomable: false,
        movable: false,
        minCropBoxWidth: 50,
        minCropBoxHeight: 50,
      })
      // When crop button is clicked this event will get triggered
      crop_btn3.addEventListener('click', () => {
        // This method coverts the selected cropped image on the cropper canvas into a blob object
        cropper.getCroppedCanvas().toBlob((blob) => {
          // Gets the original image data
          let fileInputElement3 = document.getElementById('id_image3');
          // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
          let file3 = new File([blob], img_data3.name, { type: "image/*", lastModified: new Date().getTime() });
          // Create a new container
          let container3 = new DataTransfer();
          // Add the cropped image file to the container
          container3.items.add(file3);
          // Replace the original image file with the new cropped image file
          fileInputElement3.files = container3.files;
          document.getElementById('imgView3').src = URL.createObjectURL(fileInputElement3.files[0])
          // Hide the cropper box
          document.getElementById('image-box3').style.display = 'none'
          // Hide the crop button
          document.getElementById('crop-btn3').style.display = 'none'
        })
      })
    })
  
  
    //4
    const imagebox4 = document.getElementById('image-box4')
    const crop_btn4 = document.getElementById('crop-btn4')
    const input4 = document.getElementById('id_image4')
    function viewImage4(event) {
  
  
      var fileInput4 = document.getElementById('id_image4');
  
      var filePath4 = fileInput4.value;
      var allowedExtensions = /(\.jpg|\.jpeg|\.png)$/i;
      if (!allowedExtensions.exec(filePath4)) {
        fileInput4.value = '';
        swal("There is a problem!", "Please choose image file.");
        return false;
      } else {
        document.getElementById('imgView4').src = URL.createObjectURL(event.target.files[0])
  
      }
  
    }
  
  
    // When user uploads the image this event will get triggered
    input4.addEventListener('change', () => {
      // Getting image file object from the input variable
      const img_data4 = input4.files[0]
      // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
      // The new object URL represents the specified File object or Blob object.
      const url4 = URL.createObjectURL(img_data4)
      // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
      imagebox4.innerHTML = `<img src="${url4}" id="image4" style="width:100%;">`
      // Storing that cropping view image in a variable
      const image4 = document.getElementById('image4')
  
      // Displaying the image box
      document.getElementById('image-box4').style.display = 'block'
      // Displaying the Crop buttton
      document.getElementById('crop-btn4').style.display = 'block'
      // Hiding the Post button
      const cropper = new Cropper(image4, {
        autoCropArea: 1,
        viewMode: 1,
        scalable: false,
        zoomable: false,
        movable: false,
        minCropBoxWidth: 50,
        minCropBoxHeight: 50,
      })
      // When crop button is clicked this event will get triggered
      crop_btn4.addEventListener('click', () => {
        // This method coverts the selected cropped image on the cropper canvas into a blob object
        cropper.getCroppedCanvas().toBlob((blob) => {
          // Gets the original image data
          let fileInputElement4 = document.getElementById('id_image4');
          // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
          let file4 = new File([blob], img_data4.name, { type: "image/*", lastModified: new Date().getTime() });
          // Create a new container
          let container4 = new DataTransfer();
          // Add the cropped image file to the container
          container4.items.add(file4);
          // Replace the original image file with the new cropped image file
          fileInputElement4.files = container4.files;
          document.getElementById('imgView4').src = URL.createObjectURL(fileInputElement4.files[0])
          // Hide the cropper box
          document.getElementById('image-box4').style.display = 'none'
          // Hide the crop button
          document.getElementById('crop-btn4').style.display = 'none'
        })
      })
    })
  
</script>


